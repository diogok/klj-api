{:paths ["src" "target" "resources"]
 :deps 
 {
  org.clojure/clojure {:mvn/version "1.9.0"} 

  ring {:mvn/version "1.7.0"} #_"HTTP Abstraction"
  bidi {:mvn/version "2.1.4"} #_"Routing"
  http-kit {:mvn/version "2.2.0"} #_"HTTP Server and Client, incl. websockets"

  environ {:mvn/version "1.1.0"} #_"Config loading"
  com.taoensso/timbre {:mvn/version "4.10.0"} #_"Logging"

  org.clojure/core.async {:mvn/version "0.4.474"} #_"Async operations"
  manifold {:mvn/version "0.1.8"} #_"Normalize async operations"

  medley {:mvn/version "1.0.0"} #_"Clojure Utils"

  com.taoensso/sente {:mvn/version "1.13.1"}  #_"Ajax/Websocket for CLJ/CLJS"
  com.cognitect/transit-clj {:mvn/version "0.8.313"} #_"Reader/Writer for sente"
  com.cognitect/transit-cljs {:mvn/version "0.8.256"} #_"Reader/Writer for sente"

  org.clojure/clojurescript {:mvn/version "1.10.439"}  #_"ClojureScript core"

  hiccup {:mvn/version "1.0.5"}  #_"HTML generation for CLJ"
  hiccups {:mvn/version "0.3.0"} #_"HTML generation for CLJS"
  reagent {:mvn/version "0.8.1"}  #_"React binding for CLJS"
  garden {:mvn/version "1.3.6"} #_"CSS generation for CLJ"
 }
 :aliases {
   :uberjar {:extra-deps {luchiniatwork/cambada {:mvn/version "1.0.0"}}
             :main-opts ["-m" "cambada.uberjar" 
                         "-m" "server.main"]}
   :nightlight {:extra-deps {nightlight {:mvn/version "2.3.2"}}
                :main-opts ["-m" "nightlight.core"]}
   :liquid {:extra-deps {mogenslund/liquid {:mvn/version "1.0.0"}}
            :main-opts ["-m" "dk.salza.liq.core"]}
   :run {:main-opts ["-m" "server.main"]}
   :repl {:main-opts ["--repl"]}
   :cljs-prod {:main-opts ["-m" "cljs.main"
                           "--optimizations" "advanced"
                           "--output-dir" "resources/public/js"
                           "--compile" "client.main"]}
   :cljs-repl {:main-opts ["-m" "cljs.main"
                           "-co" "dev.cljs.edn"
                           "-ro" "repl.cljs.edn"
                           "--compile" "client.main"
                           "--repl"
                          ]}
   :cljs-dev {:main-opts ["-m" "cljs.main"
                          "--watch" "src/client"
                          "--output-dir" "resources/public/js"
                          "-co" "dev.cljs.edn"
                          "--compile" "client.main"
                          ]}
 }
 :mvn/repos
    {"central" {:url "https://repo1.maven.org/maven2/"}
     "clojars" {:url "https://clojars.org/repo"}}
}
